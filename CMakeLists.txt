# --- CMake Modules

cmake_minimum_required(VERSION 3.12)
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include("Anaconda")

# --- PlantGL Project

project(plantgl CXX)

# --- Build setup

set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)

if("${isSystemDir}" STREQUAL "-1")
   set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
endif("${isSystemDir}" STREQUAL "-1")



# ---  CXX11 Compilation

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_FLAGS_RELEASE "-O2")

#include(CheckCXXCompilerFlag)
#CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
#if(COMPILER_SUPPORTS_CXX11)
#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
#else()
#        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
#endif()

# --- Define a Preprocessor Macro

set(CONFIG_HEADER "${CMAKE_CURRENT_SOURCE_DIR}/src/cpp/plantgl/userconfig.h")
set(CONFIG_PYFILE "${CMAKE_CURRENT_SOURCE_DIR}/src/plantgl/config.py")

macro(define_macro DEF_NAME DEF_VALUE)
    # Preprocessor
    add_compile_definitions("${DEF_NAME}=${DEF_VALUE}")
    
    # Append to Header File
    file(APPEND ${CONFIG_HEADER} "\n#define ${DEF_NAME} ${DEF_VALUE}\n")
endmacro()

macro(define_py_macro DEF_NAME DEF_VALUE)
    # Append to Python File
    file(APPEND ${CONFIG_PYFILE} "\n${DEF_NAME} = ${DEF_VALUE}\n")
endmacro()

# --- (Win32) Multithreaded Compilation

if (MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /W0")
endif()

# --- Config Header File

file(WRITE ${CONFIG_HEADER} "// User configuration of the PlantGL project.\n")
file(WRITE ${CONFIG_PYFILE} "# User configuration of the PlantGL project.\n")

file(APPEND ${CONFIG_HEADER} "// This file is automatically generated. Do not edit it directly.\n")
file(APPEND ${CONFIG_PYFILE} "# This file is automatically generated. Do not edit it directly.\n")

# --- PlantGL Configuration

define_py_macro(PGL_VERSION 0x30000)
define_py_macro(PGL_VERSION_STR "'3.0.0'")
define_py_macro(PGL_USE_DOUBLE "True")

## ###################################################################
## Dependencies - Python
## ###################################################################

find_package (Python3 COMPONENTS Interpreter Development)

include_directories(${Python3_INCLUDE_DIRS})

# --- Libraries

find_package(Threads REQUIRED)
find_package(Qt)

set(BOOST_ROOT $ENV{CONDA_PREFIX})

set(Boost_NO_SYSTEM_PATHS ON)
set(Boost_USE_MULTITHREAD ON)
set(Boost_USE_STATIC_LIBS OFF)
#set(Boost_DEBUG ON)
set(BUILD_SHARED_LIBS ON)

find_package(Boost COMPONENTS thread system python chrono numpy)

if (Boost_FOUND)
    # Build with Boost
    define_macro(WITH_BOOST 1)
    define_macro(BOOST_PYTHON_DYNAMIC_LIB 1)

    if(DEFINED Boost_NUMPY_LIBRARY_RELEASE)
        define_macro(WITH_BOOST_NUMPY 1)
        set(USE_BOOST_NUMPY ON)
    else()
        define_macro(WITH_BOOST_NUMPY 0)
        set(USE_BOOST_NUMPY OFF)
    endif()

    set(USE_BOOST ON)

    include_directories(${Boost_INCLUDE_DIR})
else()
    set(USE_BOOST OFF)
    set(USE_BOOST_NUMPY OFF)
    message(STATUS "Building without Boost - Library not found.")
endif()

# Other Libraries
find_package(OpenGL REQUIRED)
find_package(PNG REQUIRED)
find_package(JPEG REQUIRED)
find_package(ZLIB REQUIRED)

find_package(ANN)
find_package(BISON)
find_package(CGAL QUIET)
find_package(Eigen)
find_package(FLEX)
find_package(GMP)
find_package(Qhull)

if (BISON_FOUND AND FLEX_FOUND)
    # Build with Bison and Flex
    define_macro(WITH_FLEX 1)
    define_macro(WITH_BISON 1)
    define_macro(BISON_HPP 1)
    define_py_macro(PGL_WITH_BISONFLEX "True")
else()
    message(STATUS "Building without Bison/Flex - Not found.")
    
    define_py_macro(PGL_WITH_BISONFLEX "False")
endif()

if (CGAL_FOUND)
    # Build with CGAL
    define_macro(WITH_CGAL 1)
    define_py_macro(PGL_WITH_CGAL "True")
    
    message(STATUS "Found CGAL")
else()
    message(STATUS "Building without CGAL - Library not found.")
    
    define_py_macro(PGL_WITH_CGAL "False")
endif()

# --- Preprocessor Definitions

define_macro(_GLIBCXX_USE_CXX11_ABI 1)
define_macro(QT_GUI_LIB 1)
define_macro(QT_SHARED 1)
define_macro(PGL_USE_DOUBLE 1)


# --- Include Directories

include_directories("src/cpp")
include_directories(${PNG_INCLUDE_DIRS})
include_directories(${ZLIB_INCLUDE_DIRS})
include_directories(${OPENGL_INCLUDE_DIR})

# --- Library Directory

if (DEFINED CONDA_ENV)
    link_directories("${CONDA_ENV}/lib")
endif()

# --- Source Directories

add_subdirectory("src/cpp")

if (Boost_FOUND)
    add_subdirectory("src/wrapper")
endif()

#add_subdirectory("src/cpp/plantgl/math")

#if (Boost_FOUND)
#    add_subdirectory("src/wrapper/math")
#endif()
